const { json } = require("express");
const Profile = require("../models/profileSchema");
const User = require("../models/User");

/*
/delete/editProfile
/get/getProfileData/:profile
/delete/deleteProfile/:profile
*/

// PUT
const editProfile = async (req, res, next) => {
  const userId = req.user._id;
  try {
    if (Object.keys(req.body).length === 0) {
      return res.status(400).json({ error: "No changes applied" });
    }

    const theProfile = await Profile.findOne({ profileOwner: userId });

    if (theProfile === null) {
      const createdProfile = await Profile.create({
        profileOwner: userId,
        ...req.body
      });
      if (!createdProfile) {
        throw new Error("Error creating a profile");
      }
      return res.status(201).json({ profile: createdProfile });
    } else {
      const updatedProfile = await Profile.findOneAndUpdate(
        { profileOwner: userId },
        { $set: req.body },
        { new: true } 
      );

      if (!updatedProfile) {
        throw new Error("Error updating a profile");
      }
      return res.status(200).json({ profile: updatedProfile });
    }
  } catch (err) {
    return res.status(500).json({ error: err.message || "Internal Server Error" });
  }
};



//get
const getProfileData = async (req, res) => {
  const { profileId } = req.params;

  console.log(profileId);

  if (!profileId) {
    return res.status(400).json({ error: "Profile ID has not been sent" });
  }

  try {

    let theProfile = await Profile.findOne({ profileOwner: profileId }).lean();

    if (!theProfile) {
      return res.status(404).json({ message: "Profile not found" });
    }

    // Helper function to find and populate profiles based on profileOwner
    const populateProfiles = async (ids) => {
      const profiles = [];
      for (let id of ids) {
        const profile = await Profile.findOne({ profileOwner: id }).select('name lastname profileOwner');
        if (profile) profiles.push(profile);
      }
      return profiles;
    };

    // Populate various arrays
    theProfile.userFollowsThem = await populateProfiles(theProfile.userFollowsThem);
    theProfile.onlyUsersAllowedToSeeMe = await populateProfiles(theProfile.onlyUsersAllowedToSeeMe);
    theProfile.blockedUsers = await populateProfiles(theProfile.blockedUsers);
    theProfile.favioriteUsers = await populateProfiles(theProfile.favioriteUsers);
    theProfile.followersOfThisUser = await populateProfiles(theProfile.followersOfThisUser);

   

    res.json({ theProfile });

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Internal server error" });
  }
};


const getAllUsers = async (req, res) => {
  try {
    const users = await User.find({}, "_id username");

    if (users.length > 0) {
      res.status(200).json(users);
    } else {
      res.status(404).json({ error: "No users found" });
    }
  } catch (err) {
    res.status(500).json({ error: "Internal Server Error" });
  }
};

//delete
const deleteProfile = async (req, res) => {
  const { profile } = req.params;

  if (!profile) {
    throw new Error("profile has not been sent");
  }

  try {
    const deletedProfile = await Profile.findByIdAndDelete({ profileOwner: profile });


    if (deletedProfile) {
      res.status(200).json({ isDeleted: true });
    } else {
      res.status(404).json({ error: "profile not found" });
    }
  } catch (err) {
    res.status(500).json({ error: "Internal Server Error" });
  }
};

module.exports = {
  editProfile,
  getProfileData,
  deleteProfile,
  getAllUsers
};
