const jwt = require("jsonwebtoken");

const User = require("../models/User");

const generateToken = (payload) => {
  return jwt.sign({ payload }, process.env.JWT_SECRET, {
    expiresIn: "1h", // Token expiration time (e.g., 1 hour)
  });
};

const verifyToken = (req, res, next) => {

  const token = req.cookies["access-token"]; 

  if (!token) {
    return res.status(401).json({ error: "Unauthorized" });
  }

  // Verify the token
  jwt.verify(token, process.env.JWT_SECRET, async (err, decodedToken) => {
    if (err) {
      return res.status(401).json({ error: "Invalid token" });
    }

    try {
      const { userId } = decodedToken.payload;

      // Fetch the user from the database
      const user = await User.findById(userId);


      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }

      // Check if the user's account is suspended or terminated
      if (
        user.accountStatus === "suspended" ||
        user.accountStatus === "terminated"
      ) {
        return res
          .status(403)
          .json({ error: "Account suspended or terminated" });
      }

      // Attach the user object to the request for further use
      req.user = user;

      // Proceed to the next middleware or route handler
      next();
    } catch (error) {
      console.error(error);
      return res.status(500).json({ error: "Internal server error" });
    }
  });
};

// Function to generate an HTTP-only cookie
const setHttpOnlyCookie = (res, name, value, expiration, Path) => {
  const options = {
    httpOnly: true,
    secure: true,
    expires: expiration,
    sameSite: "Strict",
    Path,
    domain: ".lapiselin.com",
  };

  res.cookie(name, value, options);
}

module.exports = {
  generateToken,
  verifyToken,
  setHttpOnlyCookie,
};
